// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  firstName    String   @db.VarChar(50)
  middleName   String?  @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @unique @db.VarChar(50)
  passwordHash String   @db.VarChar(32)
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  lastLogin    DateTime @default(now()) @db.Timestamp(0)
  post         Post[]
}

model Post {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  authorId    Int      @db.UnsignedInt
  parentId    Int      @db.UnsignedInt
  title       String   @db.VarChar(75)
  metaTitle   String   @db.VarChar(100)
  slug        String   @db.VarChar(100)
  summary     String   @db.TinyText
  published   Int      @db.TinyInt
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
  content     String   @db.Text
  user        User     @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  post_comment  Post_comment[]
  tag_post      Post_tag[]
  post_meta     Post_meta[]
  post_category Post_category[]
}

model Post_meta {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  postId  Int    @db.UnsignedInt
  key     String @db.VarChar(50)
  content String @db.Text

  post Post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Post_comment {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  postId      Int      @db.UnsignedInt
  parentId    Int      @db.UnsignedInt
  title       String   @db.VarChar(100)
  published   String   @db.TinyText
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @updatedAt @db.DateTime()
  content     String   @db.Text
  post        Post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Tag {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)
  content   String @db.Text

  post_tag Post_tag[]
}

model Post_tag {
  id     Int  @id @default(autoincrement()) @db.UnsignedInt
  postId Int  @db.UnsignedInt
  tagId  Int  @db.UnsignedInt
  post   Post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Category {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  parentId  Int    @db.UnsignedInt
  title     String @db.VarChar(75)
  metaTitle String @db.VarChar(100)
  slug      String @db.VarChar(100)
  content   String @db.Text

  post_category Post_category[]
}

model Post_category {
  id         Int @id @default(autoincrement()) @db.UnsignedInt
  postId     Int @db.UnsignedInt
  categoryId Int @db.UnsignedInt

  post     Post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
